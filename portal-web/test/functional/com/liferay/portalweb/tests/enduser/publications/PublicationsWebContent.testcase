@component-name = "portal-publications"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Settings");

		Publications.enablePublications();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ApplicationsMenu.gotoPortlet(
				category = "Publications",
				panel = "Applications",
				portlet = "Settings");

			Publications.disablePublications();
		}
	}

	@description = "Manage Conflicting Web Content Folder changes and discard the changes."
	@priority = "4"
	test ManageConflictingWebContentFolderchanges {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Site Name");

		Publications.createNewPublication(publicationName = "Publication 1 Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.moveToFolderCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentFolder.gotoEditCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		PortletEntry.inputName(name = "WC Folder Name Edited");

		PortletEntry.save();

		Publications.gotoReviewChanges();

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Web Content Folder",
			changeSite = "Site Name",
			changeTitle = "WC Folder Name Edited",
			changeType = "Modified",
			changeUser = "Test Test");

		Publications.createNewPublication(publicationName = "Publication 2 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

		RecycleBin.deleteCP(
			assetName = "WC Folder Name",
			assetType = "Web Content Folder");

		Publications.gotoReviewChanges();

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Web Content Folder",
			changeSite = "Site Name",
			changeTitle = "WC Folder Name",
			changeType = "Deleted",
			changeUser = "Test Test");

		Publications.gotoPublish(publicationName = "Publication 2 Name");

		Publications.publishPublication(publicationName = "Publication 2 Name");

		Publications.selectPublication(publicationName = "Publication 1 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertTextNotPresent(
			locator1 = "WC#ENTRY_LIST_TITLE",
			value1 = "Web Content Folder");

		Publications.gotoPublish(publicationName = "Publication 1 Name");

		Publications.discardChanges(
			changeCategory = "WC Folder Name",
			changeTitle = "WC Folder Name Edited",
			conflictingChanges = "true",
			entryTitle = "WC Folder Name Edited");

		Publications.publishPublication(publicationName = "Publication 1 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertTextNotPresent(
			locator1 = "WC#ENTRY_LIST_TITLE",
			value1 = "Web Content Folder");
	}

	@priority = "4"
	test PublishExpiredWebContentViaWCD {
		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Test Page");

		Navigator.gotoPage(pageName = "Test Page");

		Portlet.addPG(portletName = "Web Content Display");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Test Page");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.expireSpecificVersionCP(webContentTitle = "WC WebContent Title");

		Navigator.gotoPage(pageName = "Test Page");

		WebContent.viewPGViaWCD(
			expiredContent = "true",
			webContentTitle = "WC WebContent Title");

		Publications.gotoPublish(publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Navigator.gotoPage(pageName = "Test Page");

		WebContent.viewPGViaWCD(
			expiredContent = "true",
			webContentTitle = "WC WebContent Title");
	}

	@priority = "4"
	test PublishWebContentWithCategory {
		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Categories");

		Vocabulary.addCP(vocabularyName = "Vocabulary Name");

		Category.addCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Category Name");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content");

		Publications.gotoPublish(
			gotoManagePublications = "true",
			publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Category Name");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content");
	}

	@priority = "4"
	test PublishWebContentWithDMAndImageFields {
		property test.assert.warning.exceptions = "true";

		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		for (var structureFieldName : list "Documents and Media,Image,Text") {
			DynamicDataMapping.addField(
				field = "${structureFieldName}",
				fieldFieldLabel = "${structureFieldName}",
				fieldName = StringUtil.replace("${structureFieldName}", " ", ""));
		}

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Documents and Media,Image,Text",
			templateName = "WC Template Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			fieldName = "DocumentsandMedia",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentDocumentsAndMedia = "DM Document Title",
			webContentImage = "Document_1.jpg",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		AssertElementPresent(
			key_webContentTitle = "WC WebContent Title",
			locator1 = "WC#ENTRY_LIST_TITLE");

		Publications.gotoReviewChanges();

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Dynamic Data Mapping Structure",
			changeSite = "Guest",
			changeTitle = "WC Structure Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Dynamic Data Mapping Template",
			changeSite = "Guest",
			changeTitle = "WC Template Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Document",
			changeSite = "Guest",
			changeTitle = "DM Document Title",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Document",
			changeOrder = "2",
			changeSite = "Guest",
			changeTitle = "Document_1.jpg",
			changeType = "Added",
			changeUser = "Test Test");

		Publications.gotoPublish(publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		AssertElementPresent(
			key_webContentTitle = "WC WebContent Title",
			locator1 = "WC#ENTRY_LIST_TITLE");
	}

	@priority = "4"
	test PublishWebContentWithFriendlyURL {
		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Test Page");

		Navigator.gotoPage(pageName = "Test Page");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithFriendlyURL(
			friendlyUrl = "friendlyUrl",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editDisplayPage(
			pageName = "Test Page",
			pageType = "Public Pages");

		PortletEntry.publish();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/-/friendlyUrl");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "WC WebContent Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WC WebContent Title");

		Publications.gotoReviewChanges();

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Widget",
			changeSite = "Guest",
			changeTitle = "Asset Publisher on Test Page",
			changeType = "Added",
			changeUser = "Test Test");

		Publications.gotoPublish(publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/-/friendlyUrl");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "WC WebContent Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WC WebContent Title");
	}

}